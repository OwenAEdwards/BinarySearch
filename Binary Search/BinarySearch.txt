1.) Assume you have a data structure in a sorted order, otherwise sort the data structure
2.) Check the midpoint of the data structure
3.) Continue checking midpoints of midpoints to determine if the "key" (number) we're looking for is between the new midpoint
and the previous midpoint
4.) If "key" is in the range between the new and previous midpoint, continue checking midpoints

Real-life example:
a teacher handing back tests to 300 students (N) from an alphabetized stack of last names, looking for a specific student by 
their last name (the key), starting from the 150th student's last name (midpoint) to compare students' names, seeing the "key"
student's last name she's looking for is either before or after where she picked, and continuing to cut the stack down until
she finds the right last name

Example:
[1, 3, 4, 5, 13, 20, 25, 40, 42, 44, 53]
 1  2  3  4  5   6   7   8   9   10  11  (11 elements)

let's say we're searching for 13 (the key)...

[1, 3, 4, 5, 13, 20, 25, 40, 42, 44, 53]
                 ^
                 |
            first midpoint (6)

since 13<20 (midpoint) and the data structure is in a sorted order, we choose the next midpoint to the left

[1, 3, 4, 5, 13] (⌊11/2⌋ = 5)
       ^
       |
second midpoint (3)

since 13>4 (midpoint) and the data structure is in a sorted order, we choose the next midpoint to the right

[5, 13] (⌊5/2⌋=2)
 ^
 |
third midpoint (1)

since 13>5 (midpoint) and the data structure is in a sorted order, we choose the next midpoint to the right

[13] (⌊2/2⌋=1)
 ^
 |
fifth midpoint (1)

Theory:
Since we went from N elements to N/2 elements to N/4 elements to... then the:
-best case is time complexity O(1) in big-O notation (this is if the number we're looking for is the first midpoint we choose)
-worst case is time complexity O(log_2(N)) in big-O notation (this is because the number of searches halves each time, this is
the case where N->N/2->N/4->... to infinity approaches 1, n/(2^k) => k=log_2(N))

Pseudo-code algorithm:
BinarySearch(Arr,N,key) {
    start=0, end=N-1; // start at index 0 and end at the last index of the Arr data structure
    // search while our end is larger or equal to our start, our start and end will shrink until they're equal, if nothing
    // is found in the data structure by then, then the key is not in the data structure
    while (start<=end) {
        midpoint=(start+end)/2; // new midpoint halfway between the start and end
        // if the key corresponds to the element at the index of the Arr, return the index number in the data structure
        if (key==Arr[midpoint]) {
            return midpoint;
        }
        // the key is less than the current element, cut the right-side by setting the new end to the midpoint (excluding the old
        // midpoint)
        if (key<Arr[midpoint]) {
            end=midpoint-1;
        }
        // the key is greater than the current element, cut the left-side by setting the new start to the midpoint (excluding the
        // old midpoint)
        if (key>Arr[midpoint]) {
            start=midpoint+1;
        }
    }
    return -1; // item not found in the data structure, return -1
}